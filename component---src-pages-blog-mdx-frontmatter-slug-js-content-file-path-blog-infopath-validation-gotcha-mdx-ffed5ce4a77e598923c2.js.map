{"version":3,"file":"component---src-pages-blog-mdx-frontmatter-slug-js-content-file-path-blog-infopath-validation-gotcha-mdx-ffed5ce4a77e598923c2.js","mappings":"8MAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,IAAK,MACLC,KAAM,OACNC,OAAQ,SACRC,EAAG,IACHC,GAAI,OACHC,EAAAA,EAAAA,MAAsBV,EAAMW,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBX,EAAYG,EAAG,KAAM,uQAAwQ,KAAMQ,EAAAA,cAAoBX,EAAYI,IAAK,KAAMO,EAAAA,cAAoBX,EAAYK,KAAM,CACvbO,UAAW,mBACV,2YAAkZ,KAAMD,EAAAA,cAAoBX,EAAYG,EAAG,KAAM,wCAAyCQ,EAAAA,cAAoBX,EAAYM,OAAQ,KAAM,6FAA8F,+PAAsQK,EAAAA,cAAoBX,EAAYO,EAAG,CACh6BM,KAAM,uFACL,mDAAoD,8CAA+C,KAAMF,EAAAA,cAAoBX,EAAYG,EAAG,KAAM,+FAAgG,KAAMQ,EAAAA,cAAoBX,EAAYG,EAAG,KAAMQ,EAAAA,cAAoBX,EAAYQ,GAAI,KAAM,4UAA6UG,EAAAA,cAAoBX,EAAYO,EAAG,CAC5rBM,KAAM,6GACL,gEAAiE,8IACtE,CAKA,MAJA,SAAoBd,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOe,QAASC,GAAad,OAAOC,OAAO,CAAC,GAAGO,EAAAA,EAAAA,MAAsBV,EAAMW,YAC3E,OAAOK,EAAYJ,EAAAA,cAAoBI,EAAWhB,EAAOY,EAAAA,cAAoBb,EAAmBC,IAAUD,EAAkBC,EAC9H,E,gDChBO,MAoBDiB,EAAWC,IAAsB,IAArB,KAACC,EAAI,SAAEC,GAAS,EAChC,MAAMC,GAAYC,EAAAA,EAAAA,GAASH,EAAKI,IAAIC,YAAYC,YAChD,OAAOb,EAAAA,cAAoBc,EAAAA,EAAQ,CACjCC,UAAWR,EAAKI,IAAIC,YAAYI,OAC/BhB,EAAAA,cAAoB,IAAK,KAAMA,EAAAA,cAAoB,OAAQ,CAC5DiB,SAAUV,EAAKI,IAAIC,YAAYM,SAC9BX,EAAKI,IAAIC,YAAYO,OAAQnB,EAAAA,cAAoB,SAAU,KAAMA,EAAAA,cAAoBoB,EAAAA,EAAa,CACnGC,MAAOZ,EACPa,IAAKf,EAAKI,IAAIC,YAAYW,iBACxBvB,EAAAA,cAAoB,aAAc,KAAMA,EAAAA,cAAoB,IAAK,KAAM,MAAO,IAAKA,EAAAA,cAAoB,IAAK,CAC9GE,KAAMK,EAAKI,IAAIC,YAAYY,wBAC1BjB,EAAKI,IAAIC,YAAYa,2BAA4BjB,EAAUR,EAAAA,cAAoB,MAAO,CACvFC,UAAWyB,EAAAA,GACV1B,EAAAA,cAAoB,SAAU,KAAMA,EAAAA,cAAoB2B,EAAAA,KAAM,CAC/DC,GAAI,SACH,0BAA0B,EAElBC,EAAOC,IAAA,IAAC,KAACvB,GAAK,SAAKP,EAAAA,cAAoB+B,EAAAA,EAAK,CACvDf,MAAOT,EAAKI,IAAIC,YAAYI,MAC5BgB,YAAazB,EAAKI,IAAIsB,SACtB,EAEa,SAASC,EAAiB9C,GACvC,OAAOY,EAAAA,cAAoBK,EAAUjB,EAAOY,EAAAA,cAAoBmC,EAAqB/C,GACvF,C,qDClDO,IAAIsC,EAAiB,qD","sources":["webpack://henry-chong/./blog/infopath-validation-gotcha.mdx","webpack://henry-chong/./src/pages/blog/{mdx.frontmatter__slug}.js","webpack://henry-chong/./src/pages/blog/mdx.frontmatter__slug.module.css"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\",\n    strong: \"strong\",\n    a: \"a\",\n    em: \"em\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"In an InfoPath form I've been working on, I've used the Validating event to attach some code to do some more complex validation (ie, something that I can't achieve through rules).\\r\\nIt's actually not too complicated, and follows the following general syntax:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-csharp\"\n  }, \"public void MyField_Validating(object sender, XmlValidatingEventArgs e)\\r\\n{\\r\\n    //clear any existing errors\\r\\n    try {\\r\\n        this.Errors.Delete(\\\"MyErrorName\\\");\\r\\n    } catch (ArgumentException ex) { /* Error does not exist / has not been added. */ };\\r\\n\\r\\n    if(MyErrorTest())\\r\\n    {\\r\\n        this.Errors.Add(e.Site, \\\"NoEmailsFound\\\", \\\"My error message.\\\");\\r\\n    }\\r\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"However, it's important to note that \", React.createElement(_components.strong, null, \"during the Validating event the underlying form XML data is placed into a read-only state\"), \".\\r\\nThis means that if you try and update a \\\"notification\\\" or \\\"errormessage\\\" field as part of a Validating event handler like I was, you will encounter an \\\"InvalidOperationException: Operation is not valid due to the current state of the object\\\". The \", React.createElement(_components.a, {\n    href: \"http://64.4.11.251/en-us/library/microsoft.office.infopath.xmlevent.validating.aspx\"\n  }, \"MSDN reference on the XmlEvent.Validating event\"), \" also mentions this somewhere on the page.\"), \"\\n\", React.createElement(_components.p, null, \"Hope you've all had a fantastic Christmas, and are looking forward to an exciting new year!\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.em, null, \"[Edit: I've been having trouble getting the red border to appear when using e.ReportError / this.Errors.Add() for a People Picker control; the validation works as expected as submission is disabled and Ctrl+Shift+I brings up the validation error message, but there is no visual indicator for the error, which is rather annoying. \", React.createElement(_components.a, {\n    href: \"http://social.msdn.microsoft.com/Forums/en/sharepointinfopath/thread/6b8ab5e8-1e70-4bce-a9dc-69538afb6bab\"\n  }, \"This thread was the only thing I could find about this error\"), \", but isn't particularly helpful as it suggests using design-time rules which I would use instead of code-behind, if it were possible...]\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"C:/Dev/Github/gatsby-website/blog/infopath-validation-gotcha.mdx\";\nimport * as React from \"react\";\nimport {Link, graphql} from \"gatsby\";\nimport {GatsbyImage, getImage} from \"gatsby-plugin-image\";\nimport Layout from \"../../components/layout\";\nimport Seo from \"../../components/seo\";\nimport {blogNavigation} from \"./mdx.frontmatter__slug.module.css\";\nexport const query = graphql`\n  query ($id: String) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n        date(formatString: \"D MMM yyyy\")\n        isoDate: date(formatString: \"yyyy-MM-DD\")\n        hero_image {\n          childImageSharp {\n            gatsbyImageData(aspectRatio: 1.78)\n          }\n        }\n        hero_image_alt\n        hero_image_credit_link\n        hero_image_credit_text\n      }\n      excerpt\n    }\n  }\n`;\nconst BlogPost = ({data, children}) => {\n  const heroImage = getImage(data.mdx.frontmatter.hero_image);\n  return React.createElement(Layout, {\n    pageTitle: data.mdx.frontmatter.title\n  }, React.createElement(\"p\", null, React.createElement(\"time\", {\n    dateTime: data.mdx.frontmatter.isoDate\n  }, data.mdx.frontmatter.date)), React.createElement(\"figure\", null, React.createElement(GatsbyImage, {\n    image: heroImage,\n    alt: data.mdx.frontmatter.hero_image_alt\n  }), React.createElement(\"figcaption\", null, React.createElement(\"p\", null, \"ðŸ“·:\", \" \", React.createElement(\"a\", {\n    href: data.mdx.frontmatter.hero_image_credit_link\n  }, data.mdx.frontmatter.hero_image_credit_text)))), children, React.createElement(\"div\", {\n    className: blogNavigation\n  }, React.createElement(\"button\", null, React.createElement(Link, {\n    to: \"/blog\"\n  }, \"ðŸ”™ Back to all posts\"))));\n};\nexport const Head = ({data}) => React.createElement(Seo, {\n  title: data.mdx.frontmatter.title,\n  description: data.mdx.excerpt\n});\nBlogPost\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(BlogPost, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n","// extracted by mini-css-extract-plugin\nexport var blogNavigation = \"mdx-frontmatter__slug-module--blogNavigation--7494c\";"],"names":["_createMdxContent","props","_components","Object","assign","p","pre","code","strong","a","em","_provideComponents","components","React","className","href","wrapper","MDXLayout","BlogPost","_ref","data","children","heroImage","getImage","mdx","frontmatter","hero_image","Layout","pageTitle","title","dateTime","isoDate","date","GatsbyImage","image","alt","hero_image_alt","hero_image_credit_link","hero_image_credit_text","blogNavigation","Link","to","Head","_ref2","Seo","description","excerpt","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}