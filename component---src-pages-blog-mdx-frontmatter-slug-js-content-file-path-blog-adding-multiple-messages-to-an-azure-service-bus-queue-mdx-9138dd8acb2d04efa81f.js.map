{"version":3,"file":"component---src-pages-blog-mdx-frontmatter-slug-js-content-file-path-blog-adding-multiple-messages-to-an-azure-service-bus-queue-mdx-9138dd8acb2d04efa81f.js","mappings":"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","sources":["webpack://henry-chong/./blog/adding-multiple-messages-to-an-azure-service-bus-queue.mdx","webpack://henry-chong/./src/pages/blog/{mdx.frontmatter__slug}.js","webpack://henry-chong/./src/pages/blog/mdx.frontmatter__slug.module.css"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"I don't know if this is a very common scenario, but I wrote some code earlier in the week to add a bunch of messages to a Service Queue:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-csharp\"\n  }, \"QueueClient queueClient = GetQueue();\\r\\n\\r\\nforeach(var item in myItems)\\r\\n{\\r\\n    BrokeredMessage message = new BrokeredMessage(Guid.NewGuid().ToString());\\r\\n\\r\\n    queueClient.Send(item);\\r\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"This works fine for 5 messages, but it's actually kind of slow for 2000 messages - each Send operation is bottlenecked by network, and if you're doing this on an Azure Website you will probably hit the Load Balancer timeout.\"), \"\\n\", React.createElement(_components.p, null, \"As it turns out, there's a way to cut down on the number of operations - all we have to do\\r\\nis use the \", React.createElement(_components.a, {\n    href: \"https://learn.microsoft.com/en-us/dotnet/api/microsoft.servicebus.messaging.queueclient.sendbatch\"\n  }, React.createElement(_components.code, null, \"SendBatch()\")), \" method on the \", React.createElement(_components.code, null, \"QueueClient\"), \". So my code ended up looking a little like:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-csharp\"\n  }, \"QueueClient queueClient = GetQueue();\\r\\n\\r\\nList<BrokeredMessage> messageList = new List<BrokeredMessage>();\\r\\n\\r\\nlong currentBatchSize = 0;\\r\\n\\r\\nforeach(var item in myItems)\\r\\n{\\r\\n    BrokeredMessage message = new BrokeredMessage(Guid.NewGuid().ToString());\\r\\n    currentBatchSize += message.Size;\\r\\n    messageList.Add(message);\\r\\n\\r\\n    if(currentBatchSize > 40000)\\r\\n    {\\r\\n        queueClient.SendBatch(messageList);\\r\\n        messageList.Clear();\\r\\n        currentBatchSize = 0;\\r\\n    }\\r\\n}\\r\\n\\r\\n//send the final batch\\r\\nqueueClient.SendBatch(messageList);\\n\")), \"\\n\", React.createElement(_components.p, null, \"There's a few things to note in the sample above:\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"SendBatch()\"), \" has the same maximum size limit that \", React.createElement(_components.code, null, \"Send()\"), \" has; at the time of writing this is 256kb. If you attempt to send too many messages at one time it will throw a relevant Exception telling you so.\"), \"\\n\", React.createElement(_components.p, null, \"The \", React.createElement(_components.a, {\n    href: \"https://learn.microsoft.com/en-us/dotnet/api/microsoft.servicebus.messaging.brokeredmessage.size\"\n  }, React.createElement(_components.code, null, \"BrokeredMessage.Size\")), \" property is not accurate until the message is actually sent via the \", React.createElement(_components.code, null, \"QueueClient\"), \" - I imagine this is because the headers and other message metadata bits haven't been attached yet. (My messages went from 60ish to 300ish bytes pre and post sending which is how I came to the 40000 byte per batch limit, but may be different for your specific scenario)\"), \"\\n\", React.createElement(_components.p, null, \"By using \", React.createElement(_components.code, null, \".SendBatch()\"), \" intelligently, I turned a 2 minute operation into a 2 second one. There's probably another limit to how this will scale, but that's a problem for another time!\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"C:/Dev/Github/gatsby-website/blog/adding-multiple-messages-to-an-azure-service-bus-queue.mdx\";\nimport * as React from \"react\";\nimport {Link, graphql} from \"gatsby\";\nimport {GatsbyImage, getImage} from \"gatsby-plugin-image\";\nimport Layout from \"../../components/layout\";\nimport Seo from \"../../components/seo\";\nimport {blogNavigation} from \"./mdx.frontmatter__slug.module.css\";\nexport const query = graphql`\n  query ($id: String) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n        date(formatString: \"D MMM yyyy\")\n        isoDate: date(formatString: \"yyyy-MM-DD\")\n        hero_image {\n          childImageSharp {\n            gatsbyImageData(aspectRatio: 1.78)\n          }\n        }\n        hero_image_alt\n        hero_image_credit_link\n        hero_image_credit_text\n      }\n      excerpt\n    }\n  }\n`;\nconst BlogPost = ({data, children}) => {\n  const heroImage = getImage(data.mdx.frontmatter.hero_image);\n  return React.createElement(Layout, {\n    pageTitle: data.mdx.frontmatter.title\n  }, React.createElement(\"p\", null, React.createElement(\"time\", {\n    dateTime: data.mdx.frontmatter.isoDate\n  }, data.mdx.frontmatter.date)), React.createElement(\"figure\", null, React.createElement(GatsbyImage, {\n    image: heroImage,\n    alt: data.mdx.frontmatter.hero_image_alt\n  }), React.createElement(\"figcaption\", null, React.createElement(\"p\", null, \"ðŸ“·:\", \" \", React.createElement(\"a\", {\n    href: data.mdx.frontmatter.hero_image_credit_link\n  }, data.mdx.frontmatter.hero_image_credit_text)))), children, React.createElement(\"div\", {\n    className: blogNavigation\n  }, React.createElement(\"button\", null, React.createElement(Link, {\n    to: \"/blog\"\n  }, \"ðŸ”™ Back to all posts\"))));\n};\nexport const Head = ({data}) => React.createElement(Seo, {\n  title: data.mdx.frontmatter.title,\n  description: data.mdx.excerpt\n});\nBlogPost\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(BlogPost, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n","// extracted by mini-css-extract-plugin\nexport var blogNavigation = \"mdx-frontmatter__slug-module--blogNavigation--7494c\";"],"names":["_createMdxContent","props","_components","Object","assign","p","pre","code","a","_provideComponents","components","React","className","href","wrapper","MDXLayout","BlogPost","_ref","data","children","heroImage","getImage","mdx","frontmatter","hero_image","Layout","pageTitle","title","dateTime","isoDate","date","GatsbyImage","image","alt","hero_image_alt","hero_image_credit_link","hero_image_credit_text","blogNavigation","Link","to","Head","_ref2","Seo","description","excerpt","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}