"use strict";(self.webpackChunkhenry_chong=self.webpackChunkhenry_chong||[]).push([[91],{2464:function(e,t,n){n.r(t),n.d(t,{Head:function(){return h},default:function(){return g}});var r=n(1151),a=n(7294);function s(e){const t=Object.assign({p:"p",pre:"pre",code:"code",a:"a"},(0,r.ah)(),e.components);return a.createElement(a.Fragment,null,a.createElement(t.p,null,"I don't know if this is a very common scenario, but I wrote some code earlier in the week to add a bunch of messages to a Service Queue:"),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-csharp"},"QueueClient queueClient = GetQueue();\r\n\r\nforeach(var item in myItems)\r\n{\r\n    BrokeredMessage message = new BrokeredMessage(Guid.NewGuid().ToString());\r\n\r\n    queueClient.Send(item);\r\n}\n")),"\n",a.createElement(t.p,null,"This works fine for 5 messages, but it's actually kind of slow for 2000 messages - each Send operation is bottlenecked by network, and if you're doing this on an Azure Website you will probably hit the Load Balancer timeout."),"\n",a.createElement(t.p,null,"As it turns out, there's a way to cut down on the number of operations - all we have to do\r\nis use the ",a.createElement(t.a,{href:"https://learn.microsoft.com/en-us/dotnet/api/microsoft.servicebus.messaging.queueclient.sendbatch"},a.createElement(t.code,null,"SendBatch()"))," method on the ",a.createElement(t.code,null,"QueueClient"),". So my code ended up looking a little like:"),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-csharp"},"QueueClient queueClient = GetQueue();\r\n\r\nList<BrokeredMessage> messageList = new List<BrokeredMessage>();\r\n\r\nlong currentBatchSize = 0;\r\n\r\nforeach(var item in myItems)\r\n{\r\n    BrokeredMessage message = new BrokeredMessage(Guid.NewGuid().ToString());\r\n    currentBatchSize += message.Size;\r\n    messageList.Add(message);\r\n\r\n    if(currentBatchSize > 40000)\r\n    {\r\n        queueClient.SendBatch(messageList);\r\n        messageList.Clear();\r\n        currentBatchSize = 0;\r\n    }\r\n}\r\n\r\n//send the final batch\r\nqueueClient.SendBatch(messageList);\n")),"\n",a.createElement(t.p,null,"There's a few things to note in the sample above:"),"\n",a.createElement(t.p,null,a.createElement(t.code,null,"SendBatch()")," has the same maximum size limit that ",a.createElement(t.code,null,"Send()")," has; at the time of writing this is 256kb. If you attempt to send too many messages at one time it will throw a relevant Exception telling you so."),"\n",a.createElement(t.p,null,"The ",a.createElement(t.a,{href:"https://learn.microsoft.com/en-us/dotnet/api/microsoft.servicebus.messaging.brokeredmessage.size"},a.createElement(t.code,null,"BrokeredMessage.Size"))," property is not accurate until the message is actually sent via the ",a.createElement(t.code,null,"QueueClient")," - I imagine this is because the headers and other message metadata bits haven't been attached yet. (My messages went from 60ish to 300ish bytes pre and post sending which is how I came to the 40000 byte per batch limit, but may be different for your specific scenario)"),"\n",a.createElement(t.p,null,"By using ",a.createElement(t.code,null,".SendBatch()")," intelligently, I turned a 2 minute operation into a 2 second one. There's probably another limit to how this will scale, but that's a problem for another time!"))}var i=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,r.ah)(),e.components);return t?a.createElement(t,e,a.createElement(s,e)):s(e)},o=n(1883),l=n(8032),c=n(5312),m=n(9357),u=n(62);const d=e=>{let{data:t,children:n}=e;const r=(0,l.c)(t.mdx.frontmatter.hero_image);return a.createElement(c.Z,{pageTitle:t.mdx.frontmatter.title},a.createElement("p",null,a.createElement("time",{dateTime:t.mdx.frontmatter.isoDate},t.mdx.frontmatter.date)),a.createElement("figure",null,a.createElement(l.G,{image:r,alt:t.mdx.frontmatter.hero_image_alt}),a.createElement("figcaption",null,a.createElement("p",null,"ðŸ“·:"," ",a.createElement("a",{href:t.mdx.frontmatter.hero_image_credit_link},t.mdx.frontmatter.hero_image_credit_text)))),n,a.createElement("div",{className:u.L},a.createElement("button",null,a.createElement(o.Link,{to:"/blog"},"ðŸ”™ Back to all posts"))))},h=e=>{let{data:t}=e;return a.createElement(m.Z,{title:t.mdx.frontmatter.title,description:t.mdx.excerpt})};function g(e){return a.createElement(d,e,a.createElement(i,e))}},62:function(e,t,n){n.d(t,{L:function(){return r}});var r="mdx-frontmatter__slug-module--blogNavigation--7494c"}}]);
//# sourceMappingURL=component---src-pages-blog-mdx-frontmatter-slug-js-content-file-path-blog-adding-multiple-messages-to-an-azure-service-bus-queue-mdx-9138dd8acb2d04efa81f.js.map